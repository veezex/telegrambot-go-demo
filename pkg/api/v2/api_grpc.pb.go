// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppleServiceClient is the client API for AppleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppleServiceClient interface {
	AppleGet(ctx context.Context, in *AppleGetRequest, opts ...grpc.CallOption) (*AppleGetResponse, error)
	AppleList(ctx context.Context, in *AppleListRequest, opts ...grpc.CallOption) (*AppleListResponse, error)
}

type appleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppleServiceClient(cc grpc.ClientConnInterface) AppleServiceClient {
	return &appleServiceClient{cc}
}

func (c *appleServiceClient) AppleGet(ctx context.Context, in *AppleGetRequest, opts ...grpc.CallOption) (*AppleGetResponse, error) {
	out := new(AppleGetResponse)
	err := c.cc.Invoke(ctx, "/api.v2.AppleService/AppleGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) AppleList(ctx context.Context, in *AppleListRequest, opts ...grpc.CallOption) (*AppleListResponse, error) {
	out := new(AppleListResponse)
	err := c.cc.Invoke(ctx, "/api.v2.AppleService/AppleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppleServiceServer is the server API for AppleService service.
// All implementations must embed UnimplementedAppleServiceServer
// for forward compatibility
type AppleServiceServer interface {
	AppleGet(context.Context, *AppleGetRequest) (*AppleGetResponse, error)
	AppleList(context.Context, *AppleListRequest) (*AppleListResponse, error)
	mustEmbedUnimplementedAppleServiceServer()
}

// UnimplementedAppleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppleServiceServer struct {
}

func (UnimplementedAppleServiceServer) AppleGet(context.Context, *AppleGetRequest) (*AppleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppleGet not implemented")
}
func (UnimplementedAppleServiceServer) AppleList(context.Context, *AppleListRequest) (*AppleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppleList not implemented")
}
func (UnimplementedAppleServiceServer) mustEmbedUnimplementedAppleServiceServer() {}

// UnsafeAppleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppleServiceServer will
// result in compilation errors.
type UnsafeAppleServiceServer interface {
	mustEmbedUnimplementedAppleServiceServer()
}

func RegisterAppleServiceServer(s grpc.ServiceRegistrar, srv AppleServiceServer) {
	s.RegisterService(&AppleService_ServiceDesc, srv)
}

func _AppleService_AppleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).AppleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v2.AppleService/AppleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).AppleGet(ctx, req.(*AppleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_AppleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).AppleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v2.AppleService/AppleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).AppleList(ctx, req.(*AppleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppleService_ServiceDesc is the grpc.ServiceDesc for AppleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v2.AppleService",
	HandlerType: (*AppleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppleGet",
			Handler:    _AppleService_AppleGet_Handler,
		},
		{
			MethodName: "AppleList",
			Handler:    _AppleService_AppleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

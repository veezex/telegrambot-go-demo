// Code generated by MockGen. DO NOT EDIT.
// Source: ./cache.go

// Package mocks_cache is a generated GoMock package.
package mocks_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacher) Get(key string, getter func() interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, getter)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacherMockRecorder) Get(key, getter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacher)(nil).Get), key, getter)
}

// Invalidate mocks base method.
func (m *MockCacher) Invalidate(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockCacherMockRecorder) Invalidate(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockCacher)(nil).Invalidate), key)
}

// MockCacheItem is a mock of CacheItem interface.
type MockCacheItem struct {
	ctrl     *gomock.Controller
	recorder *MockCacheItemMockRecorder
}

// MockCacheItemMockRecorder is the mock recorder for MockCacheItem.
type MockCacheItemMockRecorder struct {
	mock *MockCacheItem
}

// NewMockCacheItem creates a new mock instance.
func NewMockCacheItem(ctrl *gomock.Controller) *MockCacheItem {
	mock := &MockCacheItem{ctrl: ctrl}
	mock.recorder = &MockCacheItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheItem) EXPECT() *MockCacheItemMockRecorder {
	return m.recorder
}

// Expired mocks base method.
func (m *MockCacheItem) Expired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Expired indicates an expected call of Expired.
func (mr *MockCacheItemMockRecorder) Expired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expired", reflect.TypeOf((*MockCacheItem)(nil).Expired))
}

// GetValue mocks base method.
func (m *MockCacheItem) GetValue() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockCacheItemMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockCacheItem)(nil).GetValue))
}

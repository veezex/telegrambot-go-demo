// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apple "gitlab.ozon.dev/veezex/homework/internal/pkg/entities/apple"
	storage "gitlab.ozon.dev/veezex/homework/internal/pkg/storage"
)

// MockAppleStorage is a mock of AppleStorage interface.
type MockAppleStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAppleStorageMockRecorder
}

// MockAppleStorageMockRecorder is the mock recorder for MockAppleStorage.
type MockAppleStorageMockRecorder struct {
	mock *MockAppleStorage
}

// NewMockAppleStorage creates a new mock instance.
func NewMockAppleStorage(ctrl *gomock.Controller) *MockAppleStorage {
	mock := &MockAppleStorage{ctrl: ctrl}
	mock.recorder = &MockAppleStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppleStorage) EXPECT() *MockAppleStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAppleStorage) Add(ctx context.Context, entity *apple.Apple) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAppleStorageMockRecorder) Add(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAppleStorage)(nil).Add), ctx, entity)
}

// Delete mocks base method.
func (m *MockAppleStorage) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppleStorageMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppleStorage)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockAppleStorage) Get(ctx context.Context, id uint64) (*apple.Apple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*apple.Apple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppleStorageMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppleStorage)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockAppleStorage) List(ctx context.Context, opts *storage.PaginationOpts) ([]apple.Apple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]apple.Apple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAppleStorageMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppleStorage)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockAppleStorage) Update(ctx context.Context, entity *apple.Apple) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAppleStorageMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAppleStorage)(nil).Update), ctx, entity)
}
